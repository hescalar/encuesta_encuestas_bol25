alpha = 0.6,
position = if (any(count(df_long, mes_ano, candidat)$n > 1)) {
position_dodge(width = 0.5)  # Dodge si hay grupos con >1 observación
} else {
position_identity()          # Posición exacta si todos tienen 1 observación
}
) +
geom_errorbar(
aes(ymin = lower_ci, ymax = upper_ci),
position = if (any(count(df_long, mes_ano, candidat)$n > 1)) {
position_dodge(width = 0.5)  # Dodge si hay grupos con >1 observación
} else {
position_identity()          # Posición exacta si todos tienen 1 observación
},
width = 0.25,
alpha = 0.5
) +
geom_point(
position = if (any(count(df_long, mes_ano, candidat)$n > 1)) {
position_dodge(width = 0.5)  # Dodge si hay grupos con >1 observación
} else {
position_identity()          # Posición exacta si todos tienen 1 observación
},
size = 5,
alpha = 0.9
) +
scale_x_date(
date_labels = "%B %Y",
date_breaks = "1 month"
)  +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
breaks = seq(0, 1, by = 0.05),  # Marcas cada 5%
limits = c(0, NA)
) +
scale_color_manual(values = colores_13) +
labs(
title = "Junio 2025: intención de voto total agrupada por mes",
subtitle = "Se toma en cuenta Blancos, Nulos e Indecisos para el total",
x = "Mes de publicación",
y = "Intención de voto (%)",
color = "Candidatura",
shape = "Medio de difusión",
caption = "Fuente: Elaboración propia con base en encuestas autorizadas por el TSE y 'súper encuesta'
de Marcelo Claure, intervalos de confianza escalados con base en el margen de error que publica la encuestadora"
)  +
theme(
plot.caption = element_text(
hjust = 0,      # Alineación izquierda
size = 9,       # Tamaño de fuente
face = "italic", # Estilo de letra
color = "gray40", # Color del texto
margin = margin(t = 10)  # Margen superior
)
)+
guides(
color = guide_legend(override.aes = list(shape = 15, size = 5)),  # cuadrados para color
shape = guide_legend(override.aes = list(size = 4))               # medios normales
) +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(hjust = .5)
)
g1
votos_validos <- c("ap", "ngp", "fp", "lyp_adn", "apb_sumate",
"libre", "morena", "pdc", "mas_ipsp", "unidad")
# 2. Calcular votos efectivos
df_efectivo <- df %>%
# Seleccionar solo las columnas de partidos políticos (excluyendo blancos/nulos/indecisos)
select(id:nro_casos, all_of(votos_validos), margen_error) %>%
# Pivotear igual que antes
pivot_longer(
cols = all_of(votos_validos),
names_to = "partido",
values_to = "intencion_cruda"
) %>%
# Calcular el total válido por encuesta
group_by(id) %>%
mutate(
total_valido = sum(intencion_cruda, na.rm = TRUE),
intencion = intencion_cruda / total_valido,  # Reescalar a 100% válido
margen_error_efectivo = margen_error / total_valido  # Ajustar margen de error
) %>%
ungroup() %>%
# Mantener el join con los nombres de candidatos y fechas como en tu versión
left_join(candidat, by = "partido") %>%
mutate(
mes_ano = floor_date(fecha_pub, unit = "month")
)
# 3. Verificación (debería sumar 1 en cada encuesta)
df_efectivo %>%
group_by(id) %>%
summarise(total = sum(intencion, na.rm = TRUE), .groups = "drop") %>%
print(n = Inf)
#4. Cambiar orden candidatos para que coincidan colores
orden_original <- levels(df_long$candidat) %>%
setdiff(c("Blancos", "Nulos", "Indecisos"))
orden_original
# 2. Aplicar este orden al dataframe de votos efectivos
df_efectivo <- df_efectivo %>%
mutate(
candidat = factor(candidat, levels = orden_original)
)
levels(df_efectivo$candidat)
# 4. Mantener EXACTAMENTE tu código de promedios (solo cambiando el input)
etiquetas_actuales_ef <- attr(df_efectivo$medio, "labels")
etiquetas_actuales
etiquetas_actuales_ef
nuevas_etiquetas_ef <- c(etiquetas_actuales, "Promedio" = length(etiquetas_actuales_ef))#no necesita sumarse
df_efectivo$medio <- set_labels(df_efectivo$medio, labels = nuevas_etiquetas)
# 4. Mantener EXACTAMENTE tu código de promedios (solo cambiando el input)
etiquetas_actuales_ef <- attr(df_efectivo$medio, "labels")
etiquetas_actuales
etiquetas_actuales_ef
etiquetas_actuales_ef <- setNames(as.numeric(etiquetas_actuales_ef), names(etiquetas_actuales_ef))
nuevas_etiquetas_ef <- c(etiquetas_actuales, "Promedio" = length(etiquetas_actuales_ef))#no necesita sumarse
df_efectivo$medio <- set_labels(df_efectivo$medio, labels = nuevas_etiquetas_ef)
# 5. Calcular promedios (mismo código, ahora con intención reescalada)
promedios_efectivo <- df_efectivo %>%
group_by(mes_ano, candidat) %>%
summarise(
intencion = mean(intencion, na.rm = TRUE),
margen_error_efectivo = mean(margen_error_efectivo, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(medio = length(nuevas_etiquetas_ef))  # Valor etiquetado como "Promedio"
promedios_efectivo
# 6. Combinar conservando etiquetas (igual que tu versión)
df_efectivo<- bind_rows(df_efectivo, promedios_efectivo) %>%
mutate(medio = set_labels(as.numeric(medio), labels = nuevas_etiquetas))
# Verificación
table(df_efectivo$medio)  # Debe incluir 22="Promedio"
get_labels(df_efectivo$medio)
df_efectivo<- df_efectivo|>
mutate(
lower_ci = intencion - margen_error_efectivo,
upper_ci = intencion + margen_error_efectivo,
lower_ci = pmax(lower_ci, 0),
upper_ci = pmin(upper_ci, 1)
)
colores_10 <- c(
"#3dac34",  # ADR
"#65dfe8",  # JD
"#01a8ec",  # JF
"#aa1622",  # AS
"#541a67",  # MRV
"#ff6364",  # TUTO
"#a6761d",  # EVA
"brown",  # RPAZ
"#002696",  # EDU
"#ffc603" #KENCHA
)
#Gráfico junio efectivos
g_jun_efc<-df_efectivo %>%
filter(lubridate::month(mes_ano) == 6) %>%
ggplot(aes(
x = candidat,
y = intencion,
fill = as_label(medio),
group = as_label(medio)
)) +
geom_col(position = position_dodge(width = 1), alpha = 1, width = .8) +
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci),
position = position_dodge(width = 1),
width = .8, alpha = 0.6) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +  # si tenés paleta definida
labs(
title = "Junio 2025: intención de voto válido por candidato y medio de difusión",
x = "Candidatura",
y = "Intención de voto (%)",
fill = "Medio de difusión",
caption = "Fuente: Elaboración propia con base en encuestas autorizadas por el TSE,
intervalos de confianza escalados con base en el margen de error que publica la encuestadora"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g_jun_efc
#Gráfico votos efectivos
g_efectivo <- ggplot(df_efectivo, aes(
x = mes_ano,
y = intencion,
color = candidat,
shape = as_label(medio)
)) +
geom_line(
data = df_efectivo %>% filter(medio == length(nuevas_etiquetas)),  # Solo promedios
aes(group = candidat),
linetype = "solid",
linewidth = 0.8,
alpha = 0.6,
position = if (any(count(df_long, mes_ano, candidat)$n > 1)) {
position_dodge(width = 0.5)  # Dodge si hay grupos con >1 observación
} else {
position_identity()          # Posición exacta si todos tienen 1 observación
}
) +
geom_errorbar(
aes(ymin = lower_ci, ymax = upper_ci),
position = if (any(count(df_long, mes_ano, candidat)$n > 1)) {
position_dodge(width = 0.5)  # Dodge si hay grupos con >1 observación
} else {
position_identity()          # Posición exacta si todos tienen 1 observación
},
width = 0.25,
alpha = 0.5
) +
geom_point(
position = if (any(count(df_long, mes_ano, candidat)$n > 1)) {
position_dodge(width = 0.5)  # Dodge si hay grupos con >1 observación
} else {
position_identity()          # Posición exacta si todos tienen 1 observación
},
size = 5,
alpha = 0.9
) +
scale_x_date(
date_labels = "%B %Y",
date_breaks = "1 month"
) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
breaks = seq(0, 1, by = 0.05),  # Marcas cada 5%
limits = c(0, NA)
) +
scale_color_manual(values = colores_10) +
labs(
title = "Junio 2025: Intención de voto efectivo (100% = votos válidos)",
subtitle = "Excluyendo Blancos, Nulos e Indecisos",
x = "Mes de publicación",
y = "Porcentaje de votos válidos (%)",
color = "Candidatura",
shape = "Medio de difusión",
caption = "Fuente: Elaboración propia con base en encuestas autorizadas por el TSE y 'súper encuesta'
de Marcelo Claure, intervalos de confianza escalados con base en el margen de error que publica la encuestadora"
) +
theme(
plot.caption = element_text(
hjust = 0,      # Alineación izquierda
size = 9,       # Tamaño de fuente
face = "italic", # Estilo de letra
color = "gray40", # Color del texto
margin = margin(t = 10)  # Margen superior
)
)+
guides(
color = guide_legend(override.aes = list(shape = 15, size = 5)),
shape = guide_legend(override.aes = list(size = 4))
) +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)
)
g_efectivo
En la virtual situación de que la elección fuera este fin de semana y que los indecisos no tomen partido alguno, la segunda vuelta sería contendida por Samuel Doria Medina y Tuto Quiroga Ramírez.
g_efectivo
g_efectivo
g_efectivo+plot_ly()
plot_ly(g_efectivo)
ggplotly(g_efectivo)
?ggplotly()
#Gráfico votos efectivos
g_efectivo <- ggplot(df_efectivo, aes(
x = mes_ano,
y = intencion,
color = candidat,
shape = as_label(medio)
)) +
geom_line(
data = df_efectivo %>% filter(medio == length(nuevas_etiquetas)),  # Solo promedios
aes(group = candidat),
linetype = "solid",
linewidth = 0.8,
alpha = 0.6,
position = if (any(count(df_long, mes_ano, candidat)$n > 1)) {
position_dodge(width = 0.5)  # Dodge si hay grupos con >1 observación
} else {
position_identity()          # Posición exacta si todos tienen 1 observación
}
) +
geom_errorbar(
aes(ymin = lower_ci, ymax = upper_ci),
position = if (any(count(df_efectivo, mes_ano, candidat)$n > 1)) {
position_dodge(width = 0.5)  # Dodge si hay grupos con >1 observación
} else {
position_identity()          # Posición exacta si todos tienen 1 observación
},
width = 0.25,
alpha = 0.5
) +
geom_point(
position = if (any(count(df_efectivo, mes_ano, candidat)$n > 1)) {
position_dodge(width = 0.5)  # Dodge si hay grupos con >1 observación
} else {
position_identity()          # Posición exacta si todos tienen 1 observación
},
size = 5,
alpha = 0.9
) +
scale_x_date(
date_labels = "%B %Y",
date_breaks = "1 month"
) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
breaks = seq(0, 1, by = 0.05),  # Marcas cada 5%
limits = c(0, NA)
) +
scale_color_manual(values = colores_10) +
labs(
title = "Marzo - Junio 2025: Intención de voto efectivo (100% = votos válidos)",
subtitle = "Excluyendo Blancos, Nulos e Indecisos",
x = "Mes de publicación",
y = "Porcentaje de votos válidos (%)",
color = "Candidatura",
shape = "Medio de difusión",
caption = "Fuente: Elaboración propia con base en encuestas autorizadas por el TSE y 'súper encuesta'
de Marcelo Claure, intervalos de confianza escalados con base en el margen de error que publica la encuestadora"
) +
theme(
plot.caption = element_text(
hjust = 0,      # Alineación izquierda
size = 9,       # Tamaño de fuente
face = "italic", # Estilo de letra
color = "gray40", # Color del texto
margin = margin(t = 10)  # Margen superior
)
)+
guides(
color = guide_legend(override.aes = list(shape = 15, size = 5)),
shape = guide_legend(override.aes = list(size = 4))
) +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)
)
ggplotly()
#Gráfico votos efectivos
g_efectivo <- ggplot(df_efectivo, aes(
x = mes_ano,
y = intencion,
color = candidat,
shape = as_label(medio)
)) +
geom_line(
data = df_efectivo %>% filter(medio == length(nuevas_etiquetas)),  # Solo promedios
aes(group = candidat),
linetype = "solid",
linewidth = 0.8,
alpha = 0.6,
position = if (any(count(df_long, mes_ano, candidat)$n > 1)) {
position_dodge(width = 0.7)  # Dodge si hay grupos con >1 observación
} else {
position_identity()          # Posición exacta si todos tienen 1 observación
}
) +
geom_errorbar(
aes(ymin = lower_ci, ymax = upper_ci),
position = if (any(count(df_efectivo, mes_ano, candidat)$n > 1)) {
position_dodge(width = 0.7)  # Dodge si hay grupos con >1 observación
} else {
position_identity()          # Posición exacta si todos tienen 1 observación
},
width = 0.25,
alpha = 0.5
) +
geom_point(
position = if (any(count(df_efectivo, mes_ano, candidat)$n > 1)) {
position_dodge(width = 0.7)  # Dodge si hay grupos con >1 observación
} else {
position_identity()          # Posición exacta si todos tienen 1 observación
},
size = 5,
alpha = 0.9
) +
scale_x_date(
date_labels = "%B %Y",
date_breaks = "1 month"
) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
breaks = seq(0, 1, by = 0.05),  # Marcas cada 5%
limits = c(0, NA)
) +
scale_color_manual(values = colores_10) +
labs(
title = "Marzo - Junio 2025: Intención de voto efectivo (100% = votos válidos)",
subtitle = "Excluyendo Blancos, Nulos e Indecisos",
x = "Mes de publicación",
y = "Porcentaje de votos válidos (%)",
color = "Candidatura",
shape = "Medio de difusión",
caption = "Fuente: Elaboración propia con base en encuestas autorizadas por el TSE y 'súper encuesta'
de Marcelo Claure, intervalos de confianza escalados con base en el margen de error que publica la encuestadora"
) +
theme(
plot.caption = element_text(
hjust = 0,      # Alineación izquierda
size = 9,       # Tamaño de fuente
face = "italic", # Estilo de letra
color = "gray40", # Color del texto
margin = margin(t = 10)  # Margen superior
)
)+
guides(
color = guide_legend(override.aes = list(shape = 15, size = 5)),
shape = guide_legend(override.aes = list(size = 4))
) +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)
)
ggplotly()
g_efectivo
#Gráfico votos efectivos
g_efectivo <- ggplot(df_efectivo, aes(
x = mes_ano,
y = intencion,
color = candidat,
shape = as_label(medio)
)) +
geom_line(
data = df_efectivo %>% filter(medio == length(nuevas_etiquetas)),  # Solo promedios
aes(group = candidat),
linetype = "solid",
linewidth = 0.8,
alpha = 0.6,
position = if (any(count(df_long, mes_ano, candidat)$n > 1)) {
position_dodge(width = 2)  # Dodge si hay grupos con >1 observación
} else {
position_identity()          # Posición exacta si todos tienen 1 observación
}
) +
geom_errorbar(
aes(ymin = lower_ci, ymax = upper_ci),
position = if (any(count(df_efectivo, mes_ano, candidat)$n > 1)) {
position_dodge(width = 2)  # Dodge si hay grupos con >1 observación
} else {
position_identity()          # Posición exacta si todos tienen 1 observación
},
width = 0.25,
alpha = 0.5
) +
geom_point(
position = if (any(count(df_efectivo, mes_ano, candidat)$n > 1)) {
position_dodge(width = 2)  # Dodge si hay grupos con >1 observación
} else {
position_identity()          # Posición exacta si todos tienen 1 observación
},
size = 5,
alpha = 0.9
) +
scale_x_date(
date_labels = "%B %Y",
date_breaks = "1 month"
) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
breaks = seq(0, 1, by = 0.05),  # Marcas cada 5%
limits = c(0, NA)
) +
scale_color_manual(values = colores_10) +
labs(
title = "Marzo - Junio 2025: Intención de voto efectivo (100% = votos válidos)",
subtitle = "Excluyendo Blancos, Nulos e Indecisos",
x = "Mes de publicación",
y = "Porcentaje de votos válidos (%)",
color = "Candidatura",
shape = "Medio de difusión",
caption = "Fuente: Elaboración propia con base en encuestas autorizadas por el TSE y 'súper encuesta'
de Marcelo Claure, intervalos de confianza escalados con base en el margen de error que publica la encuestadora"
) +
theme(
plot.caption = element_text(
hjust = 0,      # Alineación izquierda
size = 9,       # Tamaño de fuente
face = "italic", # Estilo de letra
color = "gray40", # Color del texto
margin = margin(t = 10)  # Margen superior
)
)+
guides(
color = guide_legend(override.aes = list(shape = 15, size = 5)),
shape = guide_legend(override.aes = list(size = 4))
) +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)
)
g_efectivo
p <- ggplotly(g_efectivo)
str(p$x$data, max.level = 2)
str(p$x$data, max.level = 2)
for (i in seq_along(p$x$data)) {
cat("Trazado", i, ": name =", p$x$data[[i]]$name,
"| showlegend =", p$x$data[[i]]$showlegend, "\n")
}
library(gridExtra)
grid.arrange(
g_efectivo,         # Gráfico con leyenda original
ggplotly(g_efectivo) %>% layout(showlegend = FALSE),  # Gráfico interactivo sin leyenda
ncol = 2
)
grid.arrange(
g_efectivo,         # Gráfico con leyenda original
ggplotly(g_efectivo) %>% layout(showlegend = FALSE),  # Gráfico interactivo sin leyenda
ncol = 2
)
